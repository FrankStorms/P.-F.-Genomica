---
title: "PF Genomica"
author: "PÃ©rez Salcedo y Storms"
date: "20/5/2021"
output: html_document
---

Al hacer clic en el boton ** knitr **, se generara un documento que incluye tanto el contenido como la salida de cualquier fragmento de codigo R incrustado dentro del documento.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Si echo = F entonces no se imprimiran los graficos dentro del documento en R

#1.-Cargamos las librerias que requeriremos para poder correr el scrip. 
Scrip sacado de GEO2R al buscar dentro de la plataforma la base de datos GSE20347. 
Un conjunto de datos es de muestras de células con un tejido esofágico adyacente normal, que se compara con el otro conjunto de células carcinomas escamosas de esófago.


```{r}
library(GEOquery)
library(limma)
library(umap)
```

  
#2.- Carga de datos de serie y plataforma de GEO

getGEO es una función para poder obtener la base de datos de NCBI que a su ves esten cargados dentro de GEO2R. Dentro del parentesis primero se pone entre comillas el codigo de la base de datos que uno desea extraer; GSEMatrix es por defaul True, para de esta manera solo usar las columnas con valores numericos dejandola en formato matriz. AnnotGPL en True para usar los datos mas recientes dentro de la plataforma, entiendo que no deberia haber diferencia en si se pone en T o F para fines de este ejercio. 
```{r}
gset <- getGEO("GSE20347", GSEMatrix =TRUE, AnnotGPL=TRUE)
```


Es para saber lo largo del objeto y visualizar el mismo
```{r}
gset
length(gset)
```
#Entiendo que esta en un formato GEO porque se usa una función especial para que asi pueda correr las siguiente funciones, pero pense que si me arrojaria la matriz que se emplearia y no solo los metadatos.


Este condicional if, me indica que si es la base de datos se considera más largo que 1 entonces se creara un objeto llamado idx en el que va a buscar la anotación GPL571 y a esta de los atributos en gset extraera los nombres. 
#Entiendo que de esta manera se corrige un posible error para poder manejar mejor la base de datos, más no entiendo bien el porqué. Me parece que de esta forma la intención es solo quedarse con lo que esta dentro de de GPL571 aunque no entiendo bien que es lo que esta dentro y los nombres, sin más, pero no sé, y no creo que solo se este quedando con una lista de nombres.
Y si no es mayor a uno, como es el caso, se crea igual un vector idx que va a valer uno (1) , y despues en la base de datos gset solo estaran los objetos que esten dentro del elemento 1, puesto que es el valor que tiene idx
```{r}
if (length(gset) > 1) idx <- grep("GPL571", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
```
#No entiendo porque se tiene que resaltar el uso de datos dentro del elemento 1 puesto que ya con el if estas indicando que si tiene mas de un elemento, entonces debe de modificarse la base de datos. Por otro lado tampoco entiendo porque la necesidad de crear el vector idx, puesto que uno podria simplemente poner el 1 dentro de los corchetes. En general no entiendo para que se necesita el objeto/vector idx


# 4.- Hacer nombres de columna adecuados para que coincidan con la tabla
fvarLabels ayuda a adentrarse a los metadatos de la base de datos de gset, y extrae en este caso los nombres de las columnas por medio de make.names y se los asigna a gset
```{r}
fvarLabels(gset) <- make.names(fvarLabels(gset))
```
#No entiendo como es que sucede esto sin la necesidad de hacer una reasignación de la base de datos de gset previa, ya que con el if de arriba y las indicaciónes iniciales asumo que se modifico la base de datos y por ello que se quieren recuperar los nombres, pero si se quieren recuperar de la misma base de datos que se modifico creo que uno esperaria el no recuperarlos de la misma, a no ser que los metadatos no cambien sin importar que tanto se modifique la base de datos que uno visualiza. 


# 5.- Membresía de grupo para todas las muestras
group membership for all samples

Se genera el objeto gsms con un nombre numerico, los 0 corresponderan a la cantidad de muestras del control y el 1 a las muestras con el tratamiento determinado. 
```{r}
gsms <- "0000000000000000011111111111111111"
```

Se genera el objeto sml, en donde la función strplit va a dividir a los elementos del vector de caracteres de gsms, de tal modo que se formaran como subcadenas. Y solo se accedera a los elementos de la posición 1
```{r}
sml <- strsplit(gsms, split="")[[1]]
```
#No entiendo que es lo que hace split. 


# 6.- Transformación a log2

Se genera el objeto ex, y se usa la función exprs en la base de datos gset, la cual nos dara una base de datos con los valores de expresión
```{r}
ex <- exprs(gset)
```
#No sé a que se refiere con los valores de expresión

Se genera el objeto qx, se usa la función as.numeric, en donde por default todo lo que este dentro se pasara a un formato numerico. 
La función quantile agarra el objeto ex y divide la distribución los datos en los valores dentro del vector. Por lo tanto se toma todos los valores y se ordenan de menor a mayor, y despues me arroja el valor que ocupe la posición de acuerdo al quantile solicitado. si es 1 me tomara el numero mayor y si es 0 el numero menor, pero si es .5 no me arrojara el numero que corresponde a la mitad de el numero mayor, si no el numero que este dentro de mi base de datos que este a la mitad, y solo si hay dos numeros que ocupan ese lugar, se sumaran y se dividiran entre 2 y se arrojara el valor resultante.
na.rm en True hace que no calculen los cuantiles de las NA 
```{r}
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
```

Se genera el objeto LogC, en donde 
```{r}
LogC <- (qx[5] > 100) ||
  (qx[6]-qx[1] > 50 && qx[2] > 0)
```
#Tengo una muy vaga idea pero no lo entiendo. Parece que la suma de los quantiles debe ser o sera mayor a 100 o si no, entonces la suma de los cuantiles menos el primero debe ser mayor a 50 y eso se debe dividir entre el segundo cuantil que debe ser mayor a 0 

Se inicia ciclo if, en donde por lo que entiendo, a todos los valores que tienen 0 menos se les cambie por NaN.
Es algo asi como, con base en lo obtenido en LogC si en la base de datos ex, y con which lo que hace es indicar que se coloquen los elementos en donde se cumple la condición de que en la base de datos ex estan los valores menor o igual a cero y entonces todos esos espacios que sean remplazados por NaN
Luego a los valores de expresión de la base de datos de gset se van a cambiar por los datos en la base de datos ex al logaritmo base 2
```{r}
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
```


# 7.- Asignar muestras a grupos y configurar la matriz de diseño.

Se hace un objeto llamado gs, en donde se usa el comando factor para generar los mismos, con base en la base de datos sml
```{r}
gs <- factor(sml)
```
Luego se determinan los grupos, se usa la función make.names y se hace un vector con los nombres de los factores, en este caso 1 y 2
```{r}
groups <- make.names(c("1","2"))
```

Se juntan los niveles a los nombres generados
```{r}
levels(gs) <- groups
```

A la base se datos gset, se toma la columata group (o se genera), y se le agregan los niveles determinados con base a gs
```{r}
gset$group <- gs
```

Se crea el objeto design, se usa el comando model.matrix el cual genera una matriz de diseño o modelo con respecto a los datos en la columna group de la base de datos gset
```{r}
design <- model.matrix(~group + 0, gset)
```
#No entiendo bajo que condiciones se esta generando el modelo de matriz 

En la columna de nombres de la base de datos design se le asignan los niveles de la base de datos gs
```{r}
colnames(design) <- levels(gs)
```

Con lmFit se ajustan los modelos lineales 
```{r}
fit <- lmFit(gset, design)
```
#No me queda muy claro si se ajustan con base en los niveles que se determinaron, por ende cada nivel se ajusta a un modelo lineal

# 8.- establecer contrastes de interés y recalcular los coeficientes del modelo

En ctc con el comando paste se concatenan los vectores que estan en groups columan 1 y 2 y estaran separados por -
```{r}
cts <- paste(groups[1], groups[2], sep="-")
```

En count.matrix con el comando makeContrasts se designan los contrastes que se utilizaran. Con contrastes designa el vector de caracteres, y con level se designan los nombres de los parametros, y/o de los contrastes que uno ha seleccionado.
```{r}
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
```

Con el comando contrast.fit se usa la función fit para que la base de datos cont.matrix se ajuste a los datos de microarrays, calcule los coeficientes estimados y los errores estándar para un conjunto dado de contrastes.
```{r}
fit2 <- contrasts.fit(fit, cont.matrix)
```

# 9.- calcular estadísticas y una tabla de los genes más importantes

```{r}
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
```


# 10.- Visualizar y controlar los resultados de las pruebas.
# Construya un histograma de valores P para todos los genes. Prueba normal
# La suposición es que la mayoría de los genes no se expresan diferencialmente.
# assumption is that most genes are not differentially expressed.

```{r}
tT2 <- topTable(fit2, adjust="fdr", sort.by="B", number=Inf)
hist(tT2$adj.P.Val, col = "grey", border = "white", xlab = "P-adj",
     ylab = "Number of genes", main = "P-adj value distribution")
```


# 11.- resumir los resultados de la prueba como "arriba", "abajo" o "no expresado"

```{r}
dT <- decideTests(fit2, adjust.method="fdr", p.value=0.05)
```


# 12.- Diagrama de Venn de resultados

```{r}
vennDiagram(dT, circle.col=palette())
```


# 13.- crear gráfica Q-Q para el estadístico t

```{r}
t.good <- which(!is.na(fit2$F)) # filter out bad probes
qqt(fit2$t[t.good], fit2$df.total[t.good], main="Moderated t statistic")
```


# 14.- gráfico de volcán (log P valor vs log fold change)

```{r}
colnames(fit2) # list contrast names
ct <- 1        # choose contrast of interest
volcanoplot(fit2, coef=ct, main=colnames(fit2)[ct], pch=20,
            highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
```


# 15.- Grafica MD (log fold change vs Expresión logaritmica media)
# resaltar sondas estadísticamente significativas (p-adj <0.05)

```{r}
plotMD(fit2, column=ct, status=dT[,ct], legend=F, pch=20, cex=1)
abline(h=0)
```


################################################################


# 16.- Análisis de datos de expresión general

Se genera el objeto ex, y se usa la función exprs en la base de datos gset, la cual nos dara una base de datos con los valores de expresión
```{r}
ex <- exprs(gset)
```


# 17.- Diagrama box-and-whisker

dev.new devuelve el valor de retorno del dispositivo abierto, normalmente invisible NULL. Cada columna tendria un 3 cada columna de la base de datos gset entre 6 y una altura de 5
```{r}
dev.new(width=3+ncol(gset)/6, height=5)
```

Se ordenan las muestras por grupo
```{r}
ord <- order(gs)
```

Se determinan los colores de cada columna
```{r}
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
          "#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
```

Afecta parametros de la grafica
```{r}
par(mar=c(7,4,2,1))
```
#No estoy muy seguro que hace la función mar

Es para determinar el titulo, se concatena lo que uno quiere poner como titulo
```{r}
title <- paste ("GSE20347", "/", annotation(gset), sep ="")
```

Se genera el boxplot, y se determinana los parametros del formato estetico
```{r}
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
```


```{r}
legend("topleft", groups, fill=palette(), bty="n")
```
#No sé bien 


```{r}
dev.off()
```

# 18.- expression value distribution

Afecta parametros de la grafica
```{r}
par(mar=c(4,4,2,1))
```
#No sé bien que hace mar

Se determinana los titulos, concatenando los nombres de interes
```{r}
title <- paste ("GSE20347", "/", annotation(gset), " value distribution", sep ="")
```

Se hace una grafica de densidades y se determinan algunos parametros de la misma
```{r}
plotDensities(ex, group=gs, main=title, legend ="topright")
```

# 19.- UMAP plot (dimensionality reduction)

```{r}
ex <- na.omit(ex) # eliminate rows with NAs
ex <- ex[!duplicated(ex), ]  # remove duplicates
ump <- umap(t(ex), n_neighbors = 14, random_state = 123)
par(mar=c(3,3,2,6), xpd=TRUE)
plot(ump$layout, main="UMAP plot, nbrs=14", xlab="", ylab="", col=gs, pch=20, cex=1.5)
legend("topright", inset=c(-0.15,0), legend=levels(gs), pch=20,
       col=1:nlevels(gs), title="Group", pt.cex=1.5)
library("maptools")  # point labels without overlaps
pointLabel(ump$layout, labels = rownames(ump$layout), method="SANN", cex=0.6)
```


# 20.- mean-variance trend, helps to see if precision weights are needed

Se hace el plotSA
```{r}
plotSA(fit2, main="Mean variance trend, GSE20347")
```
